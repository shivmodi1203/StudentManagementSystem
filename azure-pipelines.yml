# # ASP.NET Core
# # Build and test ASP.NET Core projects targeting .NET Core.
# # Add steps that run tests, create a NuGet package, deploy, and more:
# # https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

# trigger: none

# pool: default

# variables:
# - group: myVaribales
# - name: sonarVar
#   value: '$(SONAR_TOKEN)'

# steps:

# - task: JavaToolInstaller@0
#   inputs:
#     versionSpec: '17'
#     jdkArchitectureOption: 'x64'
#     jdkSourceOption: 'LocalDirectory'
#     jdkFile: '/home/einfochips/Downloads/openjdk-17_linux-x64_bin.tar.gz'
#     jdkDestinationDirectory: '/home/einfochips/myagent/_work/9/s'
#     cleanDestinationDirectory: false


# - task: Bash@3
#   inputs:
#     targetType: 'inline'
#     script: |
#       dotnet tool install --global dotnet-sonarscanner
#       export SONAR_TOKEN=$(sonarVar)
#       dotnet sonarscanner begin /o:studentmanagementsystem /k:studentmanagementsystem_shiv /d:sonar.host.url=https://sonarcloud.io
#       dotnet build
#       dotnet sonarscanner end
#     workingDirectory: '.'

# - task: SonarCloudPrepare@1
#   inputs:
#     SonarCloud: 'sonar_cloud_token'
#     organization: 'studentmanagementsystem'
#     scannerMode: 'CLI'
#     configMode: 'manual'
#     cliProjectKey: 'studentmanagementsystem_shiv'
#     cliProjectName: 'studentmanagementsystem'
#     cliSources: '.'

# - task: DotNetCoreCLI@2
#   inputs:
#     command: 'build'
#     projects: '**/*.csproj'

# - task: SonarCloudAnalyze@1
#   inputs:
#     jdkversion: 'JAVA_HOME_17_X64'
    
# - task: SonarCloudPublish@1
#   inputs:
#     pollingTimeoutSec: '300'

# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- main
# trigger:
#   tags:
#     include:
#       - release.*
#   branches:
#     include:
#       - main

pool:
  vmImage: ubuntu-latest

variables:
  buildConfiguration: 'Release'

steps:
- task: DotNetCoreCLI@2
  displayName: Restore
  inputs:
    command: 'restore'
    projects: '**/*.csproj'
    feedsToUse: 'select'
- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    command: 'build'
    projects: '**/*.csproj'
- task: DotNetCoreCLI@2
  displayName: Pack
  inputs:
    command: 'pack'
    packagesToPack: '**/*.csproj'
    versioningScheme: 'off'
- task: DotNetCoreCLI@2
  displayName: Publish
  inputs:
    command: 'publish'
    publishWebProjects: false
    projects: '**/*.csproj'
    arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'

- task: DotNetCoreCLI@2
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
    nuGetFeedType: 'internal'
    publishVstsFeed: 'e022f26b-90cf-4ad9-9058-6eef871a63a0/9d70dd45-7611-4e31-8360-a7d9a8b4da2a'